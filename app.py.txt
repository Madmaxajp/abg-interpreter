import os
import cv2
import pytesseract
import re
import numpy as np
from flask import Flask, request, jsonify
from web3 import Web3

app = Flask(__name__)

# Configure Tesseract-OCR
pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'  # Adjust based on system

# Connect to Tea-Assam Blockchain
WEB3_PROVIDER = "https://assam-rpc.tea.xyz"
web3 = Web3(Web3.HTTPProvider(WEB3_PROVIDER))
CHAIN_ID = 93384
CURRENCY_SYMBOL = "$TEA"
BLOCK_EXPLORER = "https://assam.tea.xyz"
BRIDGE_URL = "https://tetsuo.conduit.xyz/bridge/redirect?slug=tea-assam-fo46m5b966"

if web3.is_connected():
    print("Connected to Tea-Assam Blockchain")
else:
    print("Failed to connect to blockchain")

def preprocess_image(image):
    """Applies preprocessing techniques to improve OCR accuracy."""
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    _, binary = cv2.threshold(blurred, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    return binary

def extract_text_from_image(image):
    """Extracts text from an image using OCR with preprocessing."""
    preprocessed_image = preprocess_image(image)
    extracted_text = pytesseract.image_to_string(preprocessed_image)
    return extracted_text

def extract_abg_values(text):
    """Extracts ABG values from OCR-processed text."""
    patterns = {
        "pH": r"pH[\s:=]*([7-9]\.[0-9]+)",
        "PaCO2": r"PaCO2[\s:=]*([0-9]+)[\s]*mmHg?",
        "PaO2": r"PaO2[\s:=]*([0-9]+)[\s]*mmHg?",
        "HCO3": r"HCO3[\s:=]*([0-9]+)[\s]*mEq/L?",
        "BaseExcess": r"BE[\s:=]*([-+]?[0-9]+)"
    }
    
    values = {}
    for key, pattern in patterns.items():
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            values[key] = float(match.group(1))
    
    return values

def interpret_abg(abg_values):
    """Interprets ABG values with enhanced compensation detection."""
    pH = abg_values.get("pH")
    PaCO2 = abg_values.get("PaCO2")
    HCO3 = abg_values.get("HCO3")
    
    if not all([pH, PaCO2, HCO3]):
        return "Insufficient data for interpretation."
    
    if pH < 7.35:  # Acidosis
        if PaCO2 > 45:  # Respiratory Acidosis
            if HCO3 > 26:
                return "Partially Compensated Respiratory Acidosis"
            elif HCO3 >= 22:
                return "Compensated Respiratory Acidosis"
            return "Uncompensated Respiratory Acidosis"
        elif HCO3 < 22:  # Metabolic Acidosis
            if PaCO2 < 35:
                return "Partially Compensated Metabolic Acidosis"
            return "Uncompensated Metabolic Acidosis"
    
    elif pH > 7.45:  # Alkalosis
        if PaCO2 < 35:
            if HCO3 < 22:
                return "Partially Compensated Respiratory Alkalosis"
            elif HCO3 <= 26:
                return "Compensated Respiratory Alkalosis"
            return "Uncompensated Respiratory Alkalosis"
        elif HCO3 > 26:
            if PaCO2 > 45:
                return "Partially Compensated Metabolic Alkalosis"
            return "Uncompensated Metabolic Alkalosis"
    
    return "Normal ABG"

def store_abg_on_blockchain(abg_data):
    """Stores ABG report on Tea-Assam Blockchain"""
    tx = {
        "from": "YOUR_WALLET_ADDRESS",
        "to": "RECIPIENT_WALLET",
        "value": web3.to_wei(0.001, "ether"),  # Transaction fee in TEA
        "data": web3.to_hex(text=str(abg_data))
    }
    signed_tx = web3.eth.account.sign_transaction(tx, "YOUR_PRIVATE_KEY")
    tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)
    return f"Transaction Hash: {web3.to_hex(tx_hash)}"

@app.route('/interpret_abg', methods=['POST'])
def interpret_abg_from_image():
    if 'image' not in request.files:
        return jsonify({"error": "No file provided."}), 400
    
    file = request.files['image']
    image = cv2.imdecode(np.frombuffer(file.read(), np.uint8), cv2.IMREAD_COLOR)
    
    if image is None:
        return jsonify({"error": "Invalid image file."}), 400
    
    text = extract_text_from_image(image)
    abg_values = extract_abg_values(text)
    diagnosis = interpret_abg(abg_values)
    
    # Store result on Blockchain
    blockchain_tx = store_abg_on_blockchain(abg_values)
    
    return jsonify({
        "ABG Values": abg_values,
        "Interpretation": diagnosis,
        "Blockchain Transaction": blockchain_tx,
        "Explorer URL": f"{BLOCK_EXPLORER}/tx/{blockchain_tx}"
    })

if __name__ == '__main__':
    app.run(debug=True)
